export class UIManager {
    constructor(sceneManager, animalsData) {
        this.sceneManager = sceneManager;
        this.animalsData = animalsData;
        this.currentAnimal = null;
        this.currentSystem = 'skeleton';
        this.currentGender = null;
        
        console.log('üîÑ UIManager —Å–æ–∑–¥–∞–Ω');
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UIManager');
        console.log('üìã –î–∞–Ω–Ω—ã–µ –∂–∏–≤–æ—Ç–Ω—ã—Ö:', this.animalsData);
        
        this.renderAnimalList();
        this.setupEventListeners();
        this.setupAnimalSelector();
        
        console.log('‚úÖ UIManager –≥–æ—Ç–æ–≤');
    }

    setupEventListeners() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');
        
        // –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é
        const menuToggle = document.getElementById('menu-toggle');
        console.log('–ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é:', menuToggle);
        
        if (menuToggle) {
            menuToggle.addEventListener('click', () => {
                console.log('üì± –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–∞–∂–∞—Ç–∞!');
                this.toggleMenuPanel();
            });
        } else {
            console.error('‚ùå –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
        }

        // –ö–ª–∏–∫–∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º –º–µ–Ω—é
        document.addEventListener('click', (e) => {
            const menuItem = e.target.closest('.menu-item');
            if (menuItem) {
                const menuText = menuItem.querySelector('.menu-text').textContent;
                console.log('üìù –í—ã–±—Ä–∞–Ω –ø—É–Ω–∫—Ç –º–µ–Ω—é:', menuText);
                this.handleMenuItemClick(menuText);
                this.hideMenuPanel();
            }

            // –ö–ª–∏–∫ –Ω–∞ —Å–∏—Å—Ç–µ–º–µ
            const systemBtn = e.target.closest('.system-btn');
            if (systemBtn) {
                const system = systemBtn.dataset.system;
                console.log('üî¨ –í—ã–±—Ä–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞:', system);
                this.selectSystem(system);
                return;
            }
        });

        // –°–±—Ä–æ—Å –≤–∏–¥–∞
        const resetView = document.getElementById('reset-view');
        if (resetView) {
            resetView.addEventListener('click', () => {
                console.log('üîÑ –°–±—Ä–æ—Å –≤–∏–¥–∞');
                this.sceneManager.centerModel();
            });
        }

        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    setupAnimalSelector() {
        console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö...');
        
        const animalSelectorBtn = document.getElementById('animal-selector-btn');
        const animalSelectorPanel = document.getElementById('animal-selector-panel');
        const closePanelBtn = document.querySelector('.close-panel-btn');
        
        if (animalSelectorBtn && animalSelectorPanel) {
            // –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
            animalSelectorBtn.addEventListener('click', () => {
                console.log('üêæ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö');
                this.showAnimalSelector();
            });
            
            // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
            if (closePanelBtn) {
                closePanelBtn.addEventListener('click', () => {
                    this.hideAnimalSelector();
                });
            }
            
            // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ –ø–∞–Ω–µ–ª–∏
            this.renderAnimalSelectorList();
        } else {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç—ã —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!', {
                btn: animalSelectorBtn,
                panel: animalSelectorPanel
            });
        }
    }

    showAnimalSelector() {
        const panel = document.getElementById('animal-selector-panel');
        const btn = document.getElementById('animal-selector-btn');
        
        console.log('üì± –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö');
        
        if (panel && btn) {
            panel.classList.remove('hidden');
            btn.style.opacity = '0';
            btn.style.pointerEvents = 'none';
            
            setTimeout(() => {
                panel.classList.add('active');
            }, 10);
        }
    }

    hideAnimalSelector() {
        const panel = document.getElementById('animal-selector-panel');
        const btn = document.getElementById('animal-selector-btn');
        
        console.log('üì± –°–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –≤—ã–±–æ—Ä–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö');
        
        if (panel && btn) {
            panel.classList.remove('active');
            
            setTimeout(() => {
                panel.classList.add('hidden');
                btn.style.opacity = '1';
                btn.style.pointerEvents = 'all';
            }, 300);
        }
    }

    renderAnimalSelectorList() {
        const container = document.querySelector('#animal-selector-panel .animal-selector-content');
        console.log('üìù –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ:', container);
        
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ø–∏—Å–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∂–∏–≤–æ—Ç–Ω—ã—Ö
        const animalIcons = {
            'dog': 'üêï',
            'cat': 'üêà',
            'horse': 'üêé',
            'cow': 'üêÑ',
            'pig': 'üêñ',
            'sheep': 'üêë',
            'goat': 'üêê',
            'rabbit': 'üêá',
            'chicken': 'üêî',
            'duck': 'ü¶Ü'
        };

        let html = `
            <div class="animal-selector-main">
                <div class="animal-selector-list">
        `;
        
        this.animalsData.forEach(animal => {
            const icon = animalIcons[animal.id] || 'üêæ';
            html += `
                <div class="animal-selector-item" data-animal="${animal.id}">
                    <div class="animal-item-icon">${icon}</div>
                    <div class="animal-item-info">
                        <div class="animal-item-name">${animal.name}</div>
                        <div class="animal-item-latin">${animal.latin || animal.id}</div>
                    </div>
                </div>
            `;
        });

        html += `
                </div>
                <div class="animal-gender-sidebar">
                    <div class="gender-btn-wrapper">
                        <button class="gender-btn" data-gender="male">‚ôÇ</button>
                    </div>
                    <div class="gender-btn-wrapper">
                        <button class="gender-btn" data-gender="female">‚ôÄ</button>
                    </div>
                </div>
            </div>
        `;

        container.innerHTML = html;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª–∞
        container.querySelectorAll('.gender-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                const gender = btn.dataset.gender;
                
                console.log(`üéØ –í—ã–±—Ä–∞–Ω –ø–æ–ª:`, gender);
                
                // –°–Ω–∏–º–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –ø–æ–ª–∞
                container.querySelectorAll('.gender-btn').forEach(b => {
                    b.classList.remove('active');
                });
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ
                btn.classList.add('active');
                
                this.currentGender = gender;
                console.log('‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª:', gender);
            });
        });
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ –¥–ª—è –∂–∏–≤–æ—Ç–Ω—ã—Ö
        container.querySelectorAll('.animal-selector-item').forEach(item => {
            item.addEventListener('click', () => {
                const animalId = item.dataset.animal;
                console.log('üéØ –í—ã–±—Ä–∞–Ω–æ –∂–∏–≤–æ—Ç–Ω–æ–µ –∏–∑ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞:', animalId);
                this.selectAnimal(animalId);
                this.hideAnimalSelector();
            });
        });
        
        console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤ —Å–µ–ª–µ–∫—Ç–æ—Ä–µ –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω');
    }

    toggleMenuPanel() {
        const leftMenuPanel = document.getElementById('left-menu-panel');
        const menuToggle = document.getElementById('menu-toggle');
        
        if (leftMenuPanel && menuToggle) {
            const isExpanded = leftMenuPanel.classList.contains('menu-expanded');
            
            if (isExpanded) {
                leftMenuPanel.classList.remove('menu-expanded');
                menuToggle.textContent = '‚ò∞';
            } else {
                leftMenuPanel.classList.add('menu-expanded');
                menuToggle.textContent = '‚úï';
            }
        }
    }

    hideMenuPanel() {
        const leftMenuPanel = document.getElementById('left-menu-panel');
        const menuToggle = document.getElementById('menu-toggle');
        
        if (leftMenuPanel && menuToggle) {
            leftMenuPanel.classList.remove('menu-expanded');
            menuToggle.textContent = '‚ò∞';
        }
    }

    handleMenuItemClick(menuItem) {
        console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫ –ø–æ:', menuItem);
        switch(menuItem) {
            case '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
                console.log('üë§ –û—Ç–∫—Ä—ã–≤–∞–µ–º –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç');
                break;
            case '–ù–∞—Å—Ç—Ä–æ–π–∫–∏':
                console.log('‚öôÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏');
                break;
            case '–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏':
                console.log('‚ÑπÔ∏è –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏');
                break;
            case '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã':
                console.log('üìö –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã');
                break;
            case '–ü–æ–∏—Å–∫':
                console.log('üîç –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫');
                break;
            case '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
                console.log('‚≠ê –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω–æ–µ');
                break;
        }
    }

    renderAnimalList() {
        const container = document.querySelector('.animal-list');
        console.log('üìù –†–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –≤:', container);
        
        if (!container) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ø–∏—Å–∫–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }

        let html = '';
        
        this.animalsData.forEach(animal => {
            html += `
                <div class="animal-item" data-animal="${animal.id}">
                    <div class="animal-name">${animal.name}</div>
                    <div class="animal-description">${animal.description}</div>
                </div>
            `;
        });

        container.innerHTML = html;
        console.log('‚úÖ –°–ø–∏—Å–æ–∫ –∂–∏–≤–æ—Ç–Ω—ã—Ö –æ—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω');
    }

    async selectAnimal(animalId) {
        console.log('üéØ –í—ã–±–∏—Ä–∞–µ–º –∂–∏–≤–æ—Ç–Ω–æ–µ:', animalId);
        
        const animal = this.animalsData.find(a => a.id === animalId);
        if (!animal) {
            console.error('‚ùå –ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:', animalId);
            return;
        }

        this.currentAnimal = animal;
        console.log('üìã –í—ã–±—Ä–∞–Ω–æ:', animal.name, '–ü–æ–ª:', this.currentGender);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞
        let modelPath;
        if (this.currentGender === 'male' && animal.models.male) {
            modelPath = animal.models.male[this.currentSystem];
        } else if (this.currentGender === 'female' && animal.models.female) {
            modelPath = animal.models.female[this.currentSystem];
        } else {
            modelPath = animal.models[this.currentSystem];
        }
        
        console.log('üîÑ –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏:', modelPath);
        
        if (modelPath) {
            await this.loadAnimalModel(modelPath);
        } else {
            console.error('‚ùå –ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
    }

    async selectSystem(system) {
        console.log('üî¨ –í—ã–±–∏—Ä–∞–µ–º —Å–∏—Å—Ç–µ–º—É:', system);
        
        this.currentSystem = system;
        
        document.querySelectorAll('.system-btn').forEach(btn => {
            btn.classList.remove('active');
        });
        
        const activeBtn = document.querySelector(`[data-system="${system}"]`);
        if (activeBtn) {
            activeBtn.classList.add('active');
            console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        }
        
        if (this.currentAnimal) {
            let modelPath;
            if (this.currentGender === 'male' && this.currentAnimal.models.male) {
                modelPath = this.currentAnimal.models.male[system];
            } else if (this.currentGender === 'female' && this.currentAnimal.models.female) {
                modelPath = this.currentAnimal.models.female[system];
            } else {
                modelPath = this.currentAnimal.models[system];
            }
            
            if (modelPath) {
                await this.loadAnimalModel(modelPath);
            }
        }
    }

    async loadAnimalModel(modelPath) {
        try {
            console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å...');
            await this.sceneManager.loadModel(modelPath);
            console.log('‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞!');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        }
    }

    toggleSidebar() {
        const sidebar = document.getElementById('sidebar');
        if (sidebar) {
            const wasHidden = sidebar.classList.contains('sidebar-hidden');
            sidebar.classList.toggle('sidebar-hidden');
            console.log('üì± –°–∞–π–¥–±–∞—Ä –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω. –°–µ–π—á–∞—Å —Å–∫—Ä—ã—Ç:', !wasHidden);
        } else {
            console.error('‚ùå –°–∞–π–¥–±–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        }
    }
}